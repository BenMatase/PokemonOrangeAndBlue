/* *****************************************
 * CSCI205 - Software Engineering and Design
 * Spring 2016
 *
 * Name: Benjamin Matase, Jason Corriveau, Eric Marshall, Alexander Murph
 * Date: Apr 23, 2016
 * Time: 11:36:41 PM
 *
 * Project: csci205FinalProject
 * Package: TrainerCreator
 * File: PokemonCreatorPanel
 * Description:
 *
 * ****************************************
 */
package TrainerCreator;

import DatabaseLoaderUtilities.PokemonLoaderUtility;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.SwingUtilities;

/**
 *
 * @author Benjamin Matase
 */
public class PokemonCreatorPanel extends javax.swing.JPanel implements
        ActionListener {

    String EMPTY_CHOICE = " ";

    /**
     * Creates new form PokemonCreatorPanel
     */
    public PokemonCreatorPanel() {
        initComponents();

        //hide panel with moves stuff originally
        hideMovesPnl();

        //populate pokemon drop down list with all pokemon names
        populateCbxPkmn();

        cbxPkmn.addActionListener(this);
        cbxMove1.addActionListener(this);
        cbxMove2.addActionListener(this);
        cbxMove3.addActionListener(this);
        cbxMove4.addActionListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbxPkmn = new javax.swing.JComboBox();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        pnlMoves = new javax.swing.JPanel();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        cbxMove1 = new javax.swing.JComboBox();
        cbxMove2 = new javax.swing.JComboBox();
        cbxMove3 = new javax.swing.JComboBox();
        cbxMove4 = new javax.swing.JComboBox();

        cbxPkmn.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));

        jLabel1.setText("Pokemon:");

        jLabel2.setText("Move 1:");

        jLabel3.setText("Move 2:");

        jLabel4.setText("Move 3:");

        jLabel5.setText("Move 4:");

        cbxMove1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));

        cbxMove2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));

        cbxMove3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));

        cbxMove4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));

        javax.swing.GroupLayout pnlMovesLayout = new javax.swing.GroupLayout(pnlMoves);
        pnlMoves.setLayout(pnlMovesLayout);
        pnlMovesLayout.setHorizontalGroup(
            pnlMovesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMovesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMovesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMovesLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxMove4, 0, 296, Short.MAX_VALUE))
                    .addGroup(pnlMovesLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxMove3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlMovesLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxMove1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlMovesLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxMove2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlMovesLayout.setVerticalGroup(
            pnlMovesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMovesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMovesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbxMove1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMovesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbxMove2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMovesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbxMove3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMovesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(cbxMove4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlMoves, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxPkmn, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxPkmn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlMoves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbxMove1;
    private javax.swing.JComboBox cbxMove2;
    private javax.swing.JComboBox cbxMove3;
    private javax.swing.JComboBox cbxMove4;
    private javax.swing.JComboBox cbxPkmn;
    private javax.swing.JPanel pnlMoves;
    // End of variables declaration//GEN-END:variables

    public String getPkmnName() {
        return cbxPkmn.getSelectedItem().toString();
    }

    private void populateCbxPkmn() {
        List<String> pkmnNameList = PokemonLoaderUtility.getPokemonNames();

        for (String pkmnName : pkmnNameList) {
            cbxPkmn.addItem(pkmnName);
        }
    }

    public boolean hasChosenPkmn() {
        return !cbxPkmn.getSelectedItem().equals(EMPTY_CHOICE);
    }

    public boolean hasChosenAMove() {
        boolean hasMove1 = !cbxMove1.getSelectedItem().equals(EMPTY_CHOICE);
        boolean hasMove2 = !cbxMove2.getSelectedItem().equals(EMPTY_CHOICE);
        boolean hasMove3 = !cbxMove3.getSelectedItem().equals(EMPTY_CHOICE);
        boolean hasMove4 = !cbxMove4.getSelectedItem().equals(EMPTY_CHOICE);

        return hasMove1 || hasMove2 || hasMove3 || hasMove4;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == cbxPkmn) {
            if (hasChosenPkmn()) {
                showMovesPnl();
                populateMoves();
//                this.revalidate();
                SwingUtilities.getWindowAncestor(this).pack();
            } else {
                hideMovesPnl();
//                this.revalidate();
                SwingUtilities.getWindowAncestor(this).pack();
            }
        }
    }

    private void hideMovesPnl() {
        pnlMoves.setVisible(false);
    }

    private void showMovesPnl() {
        pnlMoves.setVisible(true);
    }

    private void populateMoves() {
        String pkmnName = cbxPkmn.getSelectedItem().toString();
        List<String> moveNames = PokemonLoaderUtility.getMovesForPokemon(
                pkmnName);
        resetCbxs();
        for (String moveName : moveNames) {
            cbxMove1.addItem(moveName);
            cbxMove2.addItem(moveName);
            cbxMove3.addItem(moveName);
            cbxMove4.addItem(moveName);
        }
    }

    private void resetCbxs() {
        cbxMove1.removeAllItems();
        cbxMove2.removeAllItems();
        cbxMove3.removeAllItems();
        cbxMove4.removeAllItems();
        cbxMove1.addItem(EMPTY_CHOICE);
        cbxMove2.addItem(EMPTY_CHOICE);
        cbxMove3.addItem(EMPTY_CHOICE);
        cbxMove4.addItem(EMPTY_CHOICE);
    }

    //TODO: needs to be cleaned up
    public List<String> getMovesList() {
        List<String> moves = new ArrayList<>();

        if (!cbxMove1.getSelectedItem().toString().equals(EMPTY_CHOICE)) {
            moves.add(cbxMove1.getSelectedItem().toString());
        }
        if (!cbxMove2.getSelectedItem().toString().equals(EMPTY_CHOICE)) {
            moves.add(cbxMove2.getSelectedItem().toString());
        }
        if (!cbxMove3.getSelectedItem().toString().equals(EMPTY_CHOICE)) {
            moves.add(cbxMove2.getSelectedItem().toString());
        }
        if (!cbxMove4.getSelectedItem().toString().equals(EMPTY_CHOICE)) {
            moves.add(cbxMove2.getSelectedItem().toString());
        }

        return moves;
    }
}
